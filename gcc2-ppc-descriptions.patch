# DP: Add descriptions to rs6000.h and sysv4.h to quench warnings.
# DP:  by Franz Sirl

Index: gcc/config/rs6000/rs6000.h
--- rs6000.h	1999/06/09 15:59:37	1.49.4.1
+++ gcc/config/rs6000/rs6000.h	1999/06/12 18:55:36
@@ -352,46 +352,81 @@ extern int target_flags;
 #endif
 
 #define TARGET_SWITCHES							\
- {{"power",		MASK_POWER  | MASK_MULTIPLE | MASK_STRING},	\
+ {{"power",		MASK_POWER  | MASK_MULTIPLE | MASK_STRING,	\
+			"Use POWER instruction set"},			\
   {"power2",		(MASK_POWER | MASK_MULTIPLE | MASK_STRING	\
-			 | MASK_POWER2)},				\
-  {"no-power2",		- MASK_POWER2},					\
+			 | MASK_POWER2),				\
+			"Use POWER2 instruction set"},			\
+  {"no-power2",		- MASK_POWER2,					\
+			"Do not use POWER2 instruction set"},		\
   {"no-power",		- (MASK_POWER | MASK_POWER2 | MASK_MULTIPLE	\
-			   | MASK_STRING)},				\
-  {"powerpc",		MASK_POWERPC},					\
+			   | MASK_STRING),				\
+			"Do not use POWER instruction set"},		\
+  {"powerpc",		MASK_POWERPC,					\
+			"Use PowerPC instruction set"},			\
   {"no-powerpc",	- (MASK_POWERPC | MASK_PPC_GPOPT		\
-			   | MASK_PPC_GFXOPT | MASK_POWERPC64)},	\
-  {"powerpc-gpopt",	MASK_POWERPC | MASK_PPC_GPOPT},			\
-  {"no-powerpc-gpopt",	- MASK_PPC_GPOPT},				\
-  {"powerpc-gfxopt",	MASK_POWERPC | MASK_PPC_GFXOPT},		\
-  {"no-powerpc-gfxopt",	- MASK_PPC_GFXOPT},				\
-  {"powerpc64",		MASK_POWERPC64},				\
-  {"no-powerpc64",	- MASK_POWERPC64},				\
-  {"new-mnemonics",	MASK_NEW_MNEMONICS},				\
-  {"old-mnemonics",	-MASK_NEW_MNEMONICS},				\
+			   | MASK_PPC_GFXOPT | MASK_POWERPC64),		\
+			"Do not use PowerPC instruction set"},		\
+  {"powerpc-gpopt",	MASK_POWERPC | MASK_PPC_GPOPT,			\
+			"Use PowerPC General Purpose group optional instructions"},\
+  {"no-powerpc-gpopt",	- MASK_PPC_GPOPT,				\
+			"Don't use PowerPC General Purpose group optional instructions"},\
+  {"powerpc-gfxopt",	MASK_POWERPC | MASK_PPC_GFXOPT,			\
+			"Use PowerPC Graphics group optional instructions"},\
+  {"no-powerpc-gfxopt",	- MASK_PPC_GFXOPT,				\
+			"Don't use PowerPC Graphics group optional instructions"},\
+  {"powerpc64",		MASK_POWERPC64,					\
+			"Use PowerPC-64 instruction set"},		\
+  {"no-powerpc64",	- MASK_POWERPC64,				\
+			"Don't use PowerPC-64 instruction set"},	\
+  {"new-mnemonics",	MASK_NEW_MNEMONICS,				\
+			"Use new mnemonics for PowerPC architecture"},	\
+  {"old-mnemonics",	-MASK_NEW_MNEMONICS,				\
+			"Use old mnemonics for PowerPC architecture"},	\
   {"full-toc",		- (MASK_NO_FP_IN_TOC | MASK_NO_SUM_IN_TOC	\
-			   | MASK_MINIMAL_TOC)},			\
-  {"fp-in-toc",		- MASK_NO_FP_IN_TOC},				\
-  {"no-fp-in-toc",	MASK_NO_FP_IN_TOC},				\
-  {"sum-in-toc",	- MASK_NO_SUM_IN_TOC},				\
-  {"no-sum-in-toc",	MASK_NO_SUM_IN_TOC},				\
-  {"minimal-toc",	MASK_MINIMAL_TOC},				\
-  {"minimal-toc",	- (MASK_NO_FP_IN_TOC | MASK_NO_SUM_IN_TOC)},	\
-  {"no-minimal-toc",	- MASK_MINIMAL_TOC},				\
-  {"hard-float",	- MASK_SOFT_FLOAT},				\
-  {"soft-float",	MASK_SOFT_FLOAT},				\
-  {"multiple",		MASK_MULTIPLE | MASK_MULTIPLE_SET},		\
-  {"no-multiple",	- MASK_MULTIPLE},				\
-  {"no-multiple",	MASK_MULTIPLE_SET},				\
-  {"string",		MASK_STRING | MASK_STRING_SET},			\
-  {"no-string",		- MASK_STRING},					\
-  {"no-string",		MASK_STRING_SET},				\
-  {"update",		- MASK_NO_UPDATE},				\
-  {"no-update",		MASK_NO_UPDATE},				\
-  {"fused-madd",	- MASK_NO_FUSED_MADD},				\
-  {"no-fused-madd",	MASK_NO_FUSED_MADD},				\
+			   | MASK_MINIMAL_TOC),				\
+			"no description yet"},				\
+  {"fp-in-toc",		- MASK_NO_FP_IN_TOC,				\
+			"Place floating point constants in TOC"},	\
+  {"no-fp-in-toc",	MASK_NO_FP_IN_TOC,				\
+			"Don't place floating point constants in TOC"},	\
+  {"sum-in-toc",	- MASK_NO_SUM_IN_TOC,				\
+			"Place symbol+offset constants in TOC"},	\
+  {"no-sum-in-toc",	MASK_NO_SUM_IN_TOC,				\
+			"Don't place symbol+offset constants in TOC"},	\
+  {"minimal-toc",	MASK_MINIMAL_TOC,				\
+			"no description yet"},				\
+  {"minimal-toc",	- (MASK_NO_FP_IN_TOC | MASK_NO_SUM_IN_TOC),	\
+			"no description yet"},				\
+  {"no-minimal-toc",	- MASK_MINIMAL_TOC,				\
+			"no description yet"},				\
+  {"hard-float",	- MASK_SOFT_FLOAT,				\
+			"Use hardware fp"},				\
+  {"soft-float",	MASK_SOFT_FLOAT,				\
+			"Do not use hardware fp"},			\
+  {"multiple",		MASK_MULTIPLE | MASK_MULTIPLE_SET,		\
+			"Generate load/store multiple instructions"},	\
+  {"no-multiple",	- MASK_MULTIPLE,				\
+			"Do not generate load/store multiple instructions"},\
+  {"no-multiple",	MASK_MULTIPLE_SET,				\
+			"Do not generate load/store multiple instructions"},\
+  {"string",		MASK_STRING | MASK_STRING_SET,			\
+			"Generate string instructions for block moves"},\
+  {"no-string",		- MASK_STRING,					\
+			"Do not generate string instructions for block moves"},\
+  {"no-string",		MASK_STRING_SET,				\
+			"Do not generate string instructions for block moves"},\
+  {"update",		- MASK_NO_UPDATE,				\
+			"Generate load/store with update instructions"},\
+  {"no-update",		MASK_NO_UPDATE,					\
+			"Do not generate load/store with update instructions"},\
+  {"fused-madd",	- MASK_NO_FUSED_MADD,				\
+			"Generate fused multiply/add instructions"},	\
+  {"no-fused-madd",	MASK_NO_FUSED_MADD,				\
+			"Don't generate fused multiply/add instructions"},\
   SUBTARGET_SWITCHES							\
-  {"",			TARGET_DEFAULT}}
+  {"",			TARGET_DEFAULT,					\
+			""}}
 
 #define TARGET_DEFAULT (MASK_POWER | MASK_MULTIPLE | MASK_STRING)
 
@@ -449,13 +484,13 @@ extern enum processor_type rs6000_cpu;
 #define	SUBTARGET_OPTIONS
 #endif
 
-#define TARGET_OPTIONS				\
-{						\
-   {"cpu=",  &rs6000_select[1].string},		\
-   {"tune=", &rs6000_select[2].string},		\
-   {"debug-", &rs6000_debug_name},		\
-   {"debug=", &rs6000_debug_name},		\
-   SUBTARGET_OPTIONS				\
+#define TARGET_OPTIONS							\
+{									\
+   {"cpu=",  &rs6000_select[1].string, "Use features of and schedule code for given CPU" },\
+   {"tune=", &rs6000_select[2].string, "Schedule code for given CPU" },	\
+   {"debug-", &rs6000_debug_name, "Enable debug output" },		\
+   {"debug=", &rs6000_debug_name, "Enable debug output" },		\
+   SUBTARGET_OPTIONS							\
 }
 
 /* rs6000_select[0] is reserved for the default cpu defined via --with-cpu */
Index: gcc/config/rs6000/sysv4.h
--- sysv4.h	1999/05/28 02:46:56	1.19.4.1
+++ gcc/config/rs6000/sysv4.h	1999/06/12 18:55:38
@@ -66,39 +66,39 @@ extern enum rs6000_sdata_type rs6000_sda
    the same as -mminimal-toc.  */
 #undef	SUBTARGET_SWITCHES
 #define SUBTARGET_SWITCHES						\
-  { "bit-align",	-MASK_NO_BITFIELD_TYPE },			\
-  { "no-bit-align",	 MASK_NO_BITFIELD_TYPE },			\
-  { "strict-align",	 MASK_STRICT_ALIGN },				\
-  { "no-strict-align",	-MASK_STRICT_ALIGN },				\
-  { "relocatable",	 MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC }, \
-  { "no-relocatable",	-MASK_RELOCATABLE },				\
-  { "relocatable-lib",	 MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC }, \
-  { "no-relocatable-lib", -MASK_RELOCATABLE },				\
-  { "little-endian",	 MASK_LITTLE_ENDIAN },				\
-  { "little",		 MASK_LITTLE_ENDIAN },				\
-  { "big-endian",	-MASK_LITTLE_ENDIAN },				\
-  { "big",		-MASK_LITTLE_ENDIAN },				\
-  { "no-toc",		 0 },						\
-  { "toc",		 MASK_MINIMAL_TOC },				\
-  { "full-toc",		 MASK_MINIMAL_TOC },				\
-  { "prototype",	 MASK_PROTOTYPE },				\
-  { "no-prototype",	-MASK_PROTOTYPE },				\
-  { "no-traceback",	 0 },						\
-  { "eabi",		 MASK_EABI },					\
-  { "no-eabi",		-MASK_EABI },					\
-  { "regnames",		  MASK_REGNAMES },				\
-  { "no-regnames",	 -MASK_REGNAMES },				\
-  { "sdata",		 0 },						\
-  { "no-sdata",		 0 },						\
-  { "sim",		 0 },						\
-  { "ads",		 0 },						\
-  { "yellowknife",	 0 },						\
-  { "mvme",		 0 },						\
-  { "emb",		 0 },						\
-  { "solaris-cclib",	 0 },						\
-  { "shlib",		 0 },						\
-  EXTRA_SUBTARGET_SWITCHES                                              \
-  { "newlib",		 0 },
+  { "bit-align",	-MASK_NO_BITFIELD_TYPE, "Align to the base type of the bitfield." },\
+  { "no-bit-align",	 MASK_NO_BITFIELD_TYPE, "Don't align to the base type of the bitfield." },\
+  { "strict-align",	 MASK_STRICT_ALIGN, "Don't assume that unaligned accesses are handled by the system" },\
+  { "no-strict-align",	-MASK_STRICT_ALIGN, "Assume that unaligned accesses are handled by the system" },\
+  { "relocatable",	 MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC, "Produce code relocatable at runtime." },\
+  { "no-relocatable",	-MASK_RELOCATABLE, "Don't produce code relocatable at runtime." },\
+  { "relocatable-lib",	 MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC, "Produce code relocatable at runtime." },\
+  { "no-relocatable-lib", -MASK_RELOCATABLE, "Don't produce code relocatable at runtime." },\
+  { "little-endian",	 MASK_LITTLE_ENDIAN, "Produce little endian code." },	\
+  { "little",		 MASK_LITTLE_ENDIAN, "Produce little endian code." },	\
+  { "big-endian",	-MASK_LITTLE_ENDIAN, "Produce big endian code." },	\
+  { "big",		-MASK_LITTLE_ENDIAN, "Produce big endian code." },	\
+  { "no-toc",		 0, "no description yet" },				\
+  { "toc",		 MASK_MINIMAL_TOC, "no description yet" },		\
+  { "full-toc",		 MASK_MINIMAL_TOC, "no description yet" },		\
+  { "prototype",	 MASK_PROTOTYPE, "no description yet" },		\
+  { "no-prototype",	-MASK_PROTOTYPE, "no description yet" },		\
+  { "no-traceback",	 0, "no description yet" },				\
+  { "eabi",		 MASK_EABI, "Use EABI." },				\
+  { "no-eabi",		-MASK_EABI, "Don't use EABI." },			\
+  { "regnames",		  MASK_REGNAMES, "Use alternate register names." },	\
+  { "no-regnames",	 -MASK_REGNAMES, "Don't use alternate register names." },\
+  { "sdata",		 0, "no description yet" },				\
+  { "no-sdata",		 0, "no description yet" },				\
+  { "sim",		 0, "Link with libsim.a, libc.a and sim-crt0.o." },	\
+  { "ads",		 0, "Link with libads.a, libc.a and crt0.o." },		\
+  { "yellowknife",	 0, "Link with libyk.a, libc.a and crt0.o." },		\
+  { "mvme",		 0, "Link with libmvme.a, libc.a and crt0.o." },	\
+  { "emb",		 0, "Set the PPC_EMB bit in the ELF flags header" },	\
+  { "solaris-cclib",	 0, "no description yet" },				\
+  { "shlib",		 0, "no description yet" },				\
+  EXTRA_SUBTARGET_SWITCHES							\
+  { "newlib",		 0, "no description yet" },
 
 /* This is meant to be redefined in the host dependent files */
 #define EXTRA_SUBTARGET_SWITCHES
@@ -111,8 +111,8 @@ extern const char *rs6000_abi_name;
 extern const char *rs6000_sdata_name;
 
 #define SUBTARGET_OPTIONS						\
-  { "call-",  &rs6000_abi_name},					\
-  { "sdata=", &rs6000_sdata_name}
+  { "call-",  &rs6000_abi_name, "Select ABI calling convention." },			\
+  { "sdata=", &rs6000_sdata_name, "Select method for sdata handling." }
 
 /* Max # of bytes for variables to automatically be put into the .sdata
    or .sdata2 sections.  */
